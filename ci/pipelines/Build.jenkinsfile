def channel = "testing"
def version = "0.0.0"

pipeline
{
	agent
	{
		label 'lib-build'
	}

	parameters
	{
		booleanParam( name: 'uploadTestingPkg',
					  description: 'Whether or not to upload testing conan package',
					  defaultValue: false )
	}

	options
	{
		skipDefaultCheckout(true)
		disableConcurrentBuilds()
		buildDiscarder(logRotator(numToKeepStr: '5'))
	}

	stages
	{
		stage('Configure Conan')
		{
			steps
			{
				withCredentials([string(credentialsId: 'ArtifactoryAPIKey', variable: 'CONAN_API_KEY')])
				{
					sh "conan remote clean"
					sh "conan remote add systelab-conan https://artifactory.systelab.net/artifactory/api/conan/systelab-conan --force"
					sh "conan remote add conan-center-remote https://artifactory.systelab.net/artifactory/api/conan/conan-center-remote --force"
					sh "conan remote add systelab-conan-local https://artifactory.systelab.net/artifactory/api/conan/systelab-conan-local --force"

					sh "conan user -p ${CONAN_API_KEY} -r systelab-conan newton-ci"
					sh "conan user -p ${CONAN_API_KEY} -r conan-center-remote newton-ci"
					sh "conan user -p ${CONAN_API_KEY} -r systelab-conan-local newton-ci"

					sh "conan remote list"
					sh "conan user"
				}
			}
		}

		stage('Checkout')
		{
			steps
			{
				deleteDir()
				checkout(
					changelog: true,
					poll: true,
					scm: [
						$class: 'GitSCM',
						branches: scm.branches,
						extensions: scm.extensions + 
							[[
								$class: 'CloneOption',
								shallow: true,
								noTags: true,
								reference: '',
								timeout: 10
							]],
						userRemoteConfigs: scm.userRemoteConfigs
					]
				)
			}
		}

		stage('Read properties')
		{
			steps
			{
				script
				{
					println 'Reading pipeline properties'
					props = readProperties file:'ci/pipelines/pipeline.properties'
					props.each { propKey, propValue -> println "${propKey}: ${propValue}" }
				}
			}
		}

		stage('Build')
		{
			steps
			{
				script
				{
					props.conanHeaderPackages.split(',').each
					{ headerPkg ->
						sh script: "conan export-pkg conanfile.py ${headerPkg}/${version}@systelab/${channel} --force", label: "Build conan package for ${headerPkg}"
					}
				}
			}
		}

		stage('Deploy')
		{
			when
			{
				expression { return params.uploadTestingPkg }
			}
			steps
			{
				script
				{
					props.conanUploadPackages.split(',').each
					{ uploadPkg ->
						sh script: "conan upload ${uploadPkg}/${version}@systelab/${channel} --all -r systelab-conan-local --force", label: "Deploy conan packet for ${uploadPkg}"
					}
				}
			}
		}
	}
}